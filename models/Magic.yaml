# YOLOv5 🚀 by Ultralytics, GPL-3.0 license
 
# Parameters
nc: 3  # number of classes     V5M
depth_multiple: 0.75   # model depth multiple     0.33
width_multiple: 0.67  # layer channel multiple      0.25
anchors:
  # - [10,13, 16,30, 33,23]  # P3/8   大
  # - [30,61, 62,45, 59,119]  # P4/16  中
  # - [116,90, 156,198, 373,326]  # P5/32  小
  
  -  [5,7, 12,4, 7,10,]
  -  [9,12, 19,6, 12,15] 
  -  [27,8, 16,20, 36,11,] 
  -  [30,37, 65,20, 45,60]
 
# # YOLOv5 v6.0 backbone   提取特征
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2
#    [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#    [-1, 3, CNeB, [128]],
#    [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#    [-1, 6, CNeB, [256]],
#    [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#    [-1, 9, CNeB, [512]],
#    [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#    [-1, 3, CNeB, [1024]],     #替换部分c3   cNeB和convnextblock替换为c3提取特征
#    [-1, 1, SPPF, [1024, 5]],  # 9
#   ]
 
# # YOLOv5 v6.0 head    分割实例---分类器/回归器
# head:
#   [[-1, 1, Conv, [512, 1, 1]],     #优化conv可以使用GSConv以便减少模型复杂度
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 6], 1, Concat, [1]],  # cat backbone P4
#    [-1, 3, CNeB, [512, False]],  # 13        C3
 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 4], 1, Concat, [1]],  # cat backbone P3
#    [-1, 3, CNeB, [256, False]],  # 17 (P3/8-small)     C3
 
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, 14], 1, Concat, [1]],  # cat head P4
#    [-1, 3, CNeB, [512, False]],  # 20 (P4/16-medium)    C3 
 
#    [-1, 1, Conv, [512, 3, 2]],
#    [[-1, 10], 1, Concat, [1]],  # cat head P5
#    [-1, 3, CNeB, [1024, False]],  # 23 (P5/32-large)      C3
 
#    [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#   ]    #CNeB当neck需要全部替换，否则通道数不匹配   



#ConvNext提高提取效率，提高泛化性        ///报错尺寸对不上，原因是7x7,,5x5网格改变，自行调整
backbone:      
    # [from, number, module, args]       添加cbam注意力 + CBeN提取特征  +bifpn自适应权重+四组锚框    
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
   [-1, 3, CNeB, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8    可以降低复杂用GSConv(轻量化考虑)

   [-1, 6, CNeB, [256]],      #C3替换CNeB// ConvNextBlock     替换HorBlock高阶空间
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, CNeB, [512]],
   [-1, 1, Conv, [768, 3, 2]],  # 7-P5/32

   [-1, 3, CNeB, [768]],
   [-1, 1, Conv, [1024, 3, 2]],  # 9-P6/64
   [-1, 3, CNeB , [1024]],   #可相互替换CNeB(纯卷积网络，对标Swin-Transformer ,跟transfomer方法相反)

   [-1, 3, CBAM, [1024]],        
   [-1, 1, SPPF, [1024, 5]],  # 11 
  ]

# YOLOv5 v7.0 head     HEAD分类器也可加入CNeB   训练再加cbam     适当调大图片尺寸1280

head:
  [[-1, 1, Conv, [768, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 8], 1, BiFPN_Concat2, [1]],  # cat backbone P5
   [-1, 3, C3, [768, False]],  # 15 

   [-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, BiFPN_Concat2, [1]],  # cat backbone P4        Concat
   [-1, 3, C3, [512, False]],  # 19

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, BiFPN_Concat2, [1]],  # cat backbone P3    [-1, 4]     +1
   [-1, 3, C3, [256, False]],  # 23 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 21], 1, BiFPN_Concat2, [1]],  # cat head P4        [-1, 20]     +1     [-1, 21,4]
   [-1, 3, C3, [512, False]],  # 26 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 17], 1, BiFPN_Concat2, [1]],  # cat head P5        [-1, 16]       +1    [-1, 17,6]
   [-1, 3, C3, [768, False]],  # 29 (P5/32-large)

   [-1, 1, Conv, [768, 3, 2]],
   [[-1, 13], 1, BiFPN_Concat2, [1]],  # cat head P6      [-1, 12]        [-1,13,8],BiFPN_Concat3,[1]       +1
   [-1, 3, C3, [1024, False]],  # 32 (P6/64-xlarge)

   [[24, 27, 30, 33], 1, Detect, [nc, anchors]],  # [23, 26, 29, 32] //Detect(P3, P4, P5, P6)           +1
  ]